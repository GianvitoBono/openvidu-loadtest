AWSTemplateFormatVersion: 2010-09-09
Description: Browser Emulator

Parameters:
  ImageId:
    Type: AWS::EC2::Image::Id
    Description: An Amazon EC2 image ID, such as ami-09d56f8956ab235b3.
    Default: ami-09d56f8956ab235b3

Resources:
  BrowserInstance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT1H
        Count: 1
    Properties:
      ImageId: !Ref ImageId
      InstanceType: "t3.small"
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
    # Add KeyName: [your ssh key] to be able to access this instance
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"
        Ebs:
          VolumeType: "gp2"
          DeleteOnTermination: "true"
          VolumeSize: "50"
      UserData:
        "Fn::Base64":
          !Sub |
          #!/bin/bash
          set -eu -o pipefail
          # Bash options for strict error checking.
          set -o errexit -o errtrace -o pipefail -o nounset
          shopt -s inherit_errexit 2>/dev/null || true

          # Trace all commands.
          set -o xtrace

          DEBIAN_FRONTEND=noninteractive

          git clone https://github.com/OpenVidu/openvidu-loadtest.git /opt/openvidu-loadtest

          cd /opt/openvidu-loadtest/

          ./browser-emulator/prepare.sh
          pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
          
          # Pull images used by browser-emulator for faster initialization time
          docker pull docker.elastic.co/beats/metricbeat-oss:7.12.0
          docker pull kurento/kurento-media-server:latest
          docker network create browseremulator

          # Create recording directories
          mkdir -p ../../browser-emulator/recordings/kms
          mkdir -p ../../browser-emulator/recordings/chrome
          mkdir -p ../../browser-emulator/recordings/qoe

          echo '@reboot cd /opt/openvidu-loadtest/browser-emulator && npm run start:prod-none > /var/log/crontab.log' 2>&1 | crontab

          # sending the finish call
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource BrowserInstance --region ${AWS::Region}
